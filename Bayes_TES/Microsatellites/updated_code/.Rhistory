knitr::opts_chunk$set(echo = TRUE)
# MCMC Chain & Parallel Processing Setup
n_chains <- 4
#  Automated MCMC Control Parameters
R_hat_threshold <- 1.01
ESS_threshold <- 400
chunk_size <- 2000
max_iterations <- 10000
burn_in_frac <- 0.25
# Locus-specific parameters
# this is the size of the repeat region for each microsatellite (ie. for dimers use 2, for trimers use 3)
locirepeats = c(2,2,3,3,3,3,3)
# input file which is an excel file with the following sheets: Late Treatment Failures and Additional. You need to change this to the name of your file
inputfile = "Angola_2021_TES_7NMS.xlsx"
# Step 1: We call the function defined in R/import_data.R and pass it the file path. It returns a list containing our two clean data frames.
imported_data <- import_and_clean_data(filepath = inputfile)
genotypedata_latefailures <- imported_data$late_failures
additional_genotypedata <- imported_data$additional
# Configure parallel plan
plan(multisession, workers = n_chains)
# Step 2: Execute MCMC for All Sites, Now we pass these clean data frames to our main analysis engine.
analysis_results <- run_all_sites(
genotypedata_latefailures = genotypedata_latefailures,
additional_genotypedata = additional_genotypedata,
locirepeats = locirepeats,
n_chains = n_chains,
R_hat_threshold = R_hat_threshold,
ESS_threshold = ESS_threshold,
chunk_size = chunk_size,
max_iterations = max_iterations,
burn_in_frac = burn_in_frac
)
# MCMC is complete, we can now stop the parallel workers
plan(sequential)
# Step 3: Unpack Results the rest of the script will use these variables.
all_sites_classification <- analysis_results$classifications
all_sites_parameters     <- analysis_results$parameters
all_sites_alleles0       <- analysis_results$alleles0
all_sites_allelesf       <- analysis_results$allelesf
all_sites_ids            <- analysis_results$ids
# The original data is also passed through for the final summary table
genotypedata_latefailures <- analysis_results$genotypedata
if (length(all_sites_ids) == 0) {
stop("ERROR: No results were generated from any site no analysis is performed.")
}
# --- Create a single summary data frame ---
list_of_site_dataframes <- lapply(names(all_sites_ids), function(site) {
site_ids <- all_sites_ids[[site]]
site_classification <- all_sites_classification[[site]]
if (is.null(site_ids) || is.null(site_classification) || length(site_ids) != nrow(site_classification)) {
warning(sprintf("Data for site '%s' is inconsistent or missing. It will be excluded from the final summary.", site))
return(NULL)
}
data.frame(
Site = site,
ID = site_ids,
Probability = rowMeans(site_classification),
stringsAsFactors = FALSE
)
})
clean_list_of_dataframes <- Filter(Negate(is.null), list_of_site_dataframes)
if (length(clean_list_of_dataframes) == 0) {
stop("ERROR: All sites failed processing. No data available for final analysis.")
}
final_summary_df <- do.call(rbind, clean_list_of_dataframes)
hist(final_summary_df$Probability, breaks = 20,
main = "Distribution of posterior probability of recrudescence (All Sites)",
xlab = "Posterior probability of recrudescence")
write.csv(final_summary_df, "probability_of_recrudescence_summary.csv", row.names = FALSE)
#Match probabilities back to the original genotype data
genotypedata_latefailures$base_ID <- gsub(" Day 0| Day Failure", "", genotypedata_latefailures$Sample.ID)
matched_indices <- match(genotypedata_latefailures$base_ID, final_summary_df$ID)
probability_of_recrudescence_correctorder <- final_summary_df$Probability[matched_indices]
is_day_failure_row <- grepl("Day Failure", genotypedata_latefailures$Sample.ID)
probability_of_recrudescence_correctorder[is_day_failure_row] <- NA
probability_of_recrudescence_correctorder_formatted <- sapply(probability_of_recrudescence_correctorder, function(x) {
if (is.na(x)) return("") else return(format(round(x, 2), nsmall = 2))
})
probability_of_recrudescence_correctorder2 <- probability_of_recrudescence_correctorder
probability_of_recrudescence_correctorder2[is.na(probability_of_recrudescence_correctorder2)] <- -1
